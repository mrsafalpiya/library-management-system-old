// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: reservation.sql

package db

import (
	"context"
)

const createReservation = `-- name: CreateReservation :one
INSERT INTO reservations (
	book_id,
	user_id
) VALUES (
	$1, $2
) RETURNING id, book_id, user_id, created_at
`

type CreateReservationParams struct {
	BookID int64 `json:"book_id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) CreateReservation(ctx context.Context, arg CreateReservationParams) (Reservation, error) {
	row := q.db.QueryRowContext(ctx, createReservation, arg.BookID, arg.UserID)
	var i Reservation
	err := row.Scan(
		&i.ID,
		&i.BookID,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteReservation = `-- name: DeleteReservation :exec
DELETE FROM reservations
WHERE id = $1
`

func (q *Queries) DeleteReservation(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteReservation, id)
	return err
}

const getReservation = `-- name: GetReservation :one
SELECT id, book_id, user_id, created_at FROM reservations
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetReservation(ctx context.Context, id int64) (Reservation, error) {
	row := q.db.QueryRowContext(ctx, getReservation, id)
	var i Reservation
	err := row.Scan(
		&i.ID,
		&i.BookID,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}
