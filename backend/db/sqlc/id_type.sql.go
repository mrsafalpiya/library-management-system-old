// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: id_type.sql

package db

import (
	"context"
)

const createIDType = `-- name: CreateIDType :one
INSERT INTO id_types (
	id_type
) VALUES (
	$1
) RETURNING id, id_type
`

func (q *Queries) CreateIDType(ctx context.Context, idType string) (IDType, error) {
	row := q.db.QueryRowContext(ctx, createIDType, idType)
	var i IDType
	err := row.Scan(&i.ID, &i.IDType)
	return i, err
}

const deleteIDType = `-- name: DeleteIDType :exec
DELETE FROM id_types
WHERE id = $1
`

func (q *Queries) DeleteIDType(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteIDType, id)
	return err
}

const getIDType = `-- name: GetIDType :one
SELECT id, id_type FROM id_types
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetIDType(ctx context.Context, id int64) (IDType, error) {
	row := q.db.QueryRowContext(ctx, getIDType, id)
	var i IDType
	err := row.Scan(&i.ID, &i.IDType)
	return i, err
}

const listIDTypes = `-- name: ListIDTypes :many
SELECT id, id_type FROM id_types
ORDER BY id
`

func (q *Queries) ListIDTypes(ctx context.Context) ([]IDType, error) {
	rows, err := q.db.QueryContext(ctx, listIDTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []IDType
	for rows.Next() {
		var i IDType
		if err := rows.Scan(&i.ID, &i.IDType); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateIDType = `-- name: UpdateIDType :one
UPDATE id_types
SET id_type = $2
WHERE id = $1
RETURNING id, id_type
`

type UpdateIDTypeParams struct {
	ID     int64  `json:"id"`
	IDType string `json:"id_type"`
}

func (q *Queries) UpdateIDType(ctx context.Context, arg UpdateIDTypeParams) (IDType, error) {
	row := q.db.QueryRowContext(ctx, updateIDType, arg.ID, arg.IDType)
	var i IDType
	err := row.Scan(&i.ID, &i.IDType)
	return i, err
}
