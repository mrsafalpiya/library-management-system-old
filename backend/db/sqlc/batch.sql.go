// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: batch.sql

package db

import (
	"context"
)

const createBatch = `-- name: CreateBatch :one
INSERT INTO batches (
	name
) VALUES (
	$1
) RETURNING id, name
`

func (q *Queries) CreateBatch(ctx context.Context, name string) (Batch, error) {
	row := q.db.QueryRowContext(ctx, createBatch, name)
	var i Batch
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteBatch = `-- name: DeleteBatch :exec
DELETE FROM batches
WHERE id = $1
`

func (q *Queries) DeleteBatch(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteBatch, id)
	return err
}

const getBatch = `-- name: GetBatch :one
SELECT id, name FROM batches
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBatch(ctx context.Context, id int64) (Batch, error) {
	row := q.db.QueryRowContext(ctx, getBatch, id)
	var i Batch
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listBatches = `-- name: ListBatches :many
SELECT id, name FROM batches
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListBatchesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListBatches(ctx context.Context, arg ListBatchesParams) ([]Batch, error) {
	rows, err := q.db.QueryContext(ctx, listBatches, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Batch
	for rows.Next() {
		var i Batch
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBatch = `-- name: UpdateBatch :one
UPDATE batches
SET name = $2
WHERE id = $1
RETURNING id, name
`

type UpdateBatchParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateBatch(ctx context.Context, arg UpdateBatchParams) (Batch, error) {
	row := q.db.QueryRowContext(ctx, updateBatch, arg.ID, arg.Name)
	var i Batch
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
