// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
	id_type_id,
	id_num,
	name,
	password_hashed
) VALUES (
	$1, $2, $3, $4
) RETURNING id, id_type_id, id_num, name, password_hashed
`

type CreateUserParams struct {
	IDTypeID       sql.NullInt64 `json:"id_type_id"`
	IDNum          string        `json:"id_num"`
	Name           string        `json:"name"`
	PasswordHashed string        `json:"password_hashed"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.IDTypeID,
		arg.IDNum,
		arg.Name,
		arg.PasswordHashed,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.IDTypeID,
		&i.IDNum,
		&i.Name,
		&i.PasswordHashed,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, id_type_id, id_num, name, password_hashed FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.IDTypeID,
		&i.IDNum,
		&i.Name,
		&i.PasswordHashed,
	)
	return i, err
}

const getUserOfIDNum = `-- name: GetUserOfIDNum :one
SELECT id, id_type_id, id_num, name, password_hashed FROM users
WHERE id_num = $1 LIMIT 1
`

func (q *Queries) GetUserOfIDNum(ctx context.Context, idNum string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserOfIDNum, idNum)
	var i User
	err := row.Scan(
		&i.ID,
		&i.IDTypeID,
		&i.IDNum,
		&i.Name,
		&i.PasswordHashed,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, id_type_id, id_num, name, password_hashed FROM users
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.IDTypeID,
			&i.IDNum,
			&i.Name,
			&i.PasswordHashed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersOfIDType = `-- name: ListUsersOfIDType :many
SELECT id, id_type_id, id_num, name, password_hashed FROM users
WHERE id_type_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListUsersOfIDTypeParams struct {
	IDTypeID sql.NullInt64 `json:"id_type_id"`
	Limit    int32         `json:"limit"`
	Offset   int32         `json:"offset"`
}

func (q *Queries) ListUsersOfIDType(ctx context.Context, arg ListUsersOfIDTypeParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsersOfIDType, arg.IDTypeID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.IDTypeID,
			&i.IDNum,
			&i.Name,
			&i.PasswordHashed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET id_type_id = $2, id_num = $3, name = $4, password_hashed = $5
WHERE id = $1
RETURNING id, id_type_id, id_num, name, password_hashed
`

type UpdateUserParams struct {
	ID             int64         `json:"id"`
	IDTypeID       sql.NullInt64 `json:"id_type_id"`
	IDNum          string        `json:"id_num"`
	Name           string        `json:"name"`
	PasswordHashed string        `json:"password_hashed"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.IDTypeID,
		arg.IDNum,
		arg.Name,
		arg.PasswordHashed,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.IDTypeID,
		&i.IDNum,
		&i.Name,
		&i.PasswordHashed,
	)
	return i, err
}
