// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: book.sql

package db

import (
	"context"
	"database/sql"
)

const createBook = `-- name: CreateBook :one
INSERT INTO books (
	code,
	title,
	author,
	publisher
) VALUES (
	$1, $2, $3, $4
) RETURNING id, code, title, author, publisher
`

type CreateBookParams struct {
	Code      string         `json:"code"`
	Title     string         `json:"title"`
	Author    sql.NullString `json:"author"`
	Publisher sql.NullString `json:"publisher"`
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, createBook,
		arg.Code,
		arg.Title,
		arg.Author,
		arg.Publisher,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Title,
		&i.Author,
		&i.Publisher,
	)
	return i, err
}

const deleteBook = `-- name: DeleteBook :exec
DELETE FROM books
WHERE id = $1
`

func (q *Queries) DeleteBook(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteBook, id)
	return err
}

const getBook = `-- name: GetBook :one
SELECT id, code, title, author, publisher FROM books
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBook(ctx context.Context, id int64) (Book, error) {
	row := q.db.QueryRowContext(ctx, getBook, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Title,
		&i.Author,
		&i.Publisher,
	)
	return i, err
}

const listBooks = `-- name: ListBooks :many
SELECT id, code, title, author, publisher FROM books
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListBooksParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListBooks(ctx context.Context, arg ListBooksParams) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, listBooks, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Title,
			&i.Author,
			&i.Publisher,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBook = `-- name: UpdateBook :one
UPDATE books
SET code = $2, title = $3, author = $4, publisher = $5
WHERE id = $1
RETURNING id, code, title, author, publisher
`

type UpdateBookParams struct {
	ID        int64          `json:"id"`
	Code      string         `json:"code"`
	Title     string         `json:"title"`
	Author    sql.NullString `json:"author"`
	Publisher sql.NullString `json:"publisher"`
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, updateBook,
		arg.ID,
		arg.Code,
		arg.Title,
		arg.Author,
		arg.Publisher,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Title,
		&i.Author,
		&i.Publisher,
	)
	return i, err
}
