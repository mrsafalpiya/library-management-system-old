// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: profile.sql

package db

import (
	"context"
	"database/sql"
)

const createProfile = `-- name: CreateProfile :one
INSERT INTO profiles (
	user_id,
	address,
	city,
	state,
	contact,
	email,
	batch_id
) VALUES (
	$1, $2, $3, $4, $5, $6, $7
) RETURNING id, user_id, address, city, state, contact, email, batch_id
`

type CreateProfileParams struct {
	UserID  sql.NullInt64  `json:"user_id"`
	Address sql.NullString `json:"address"`
	City    sql.NullString `json:"city"`
	State   sql.NullString `json:"state"`
	Contact sql.NullString `json:"contact"`
	Email   sql.NullString `json:"email"`
	BatchID sql.NullInt64  `json:"batch_id"`
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) (Profile, error) {
	row := q.db.QueryRowContext(ctx, createProfile,
		arg.UserID,
		arg.Address,
		arg.City,
		arg.State,
		arg.Contact,
		arg.Email,
		arg.BatchID,
	)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Address,
		&i.City,
		&i.State,
		&i.Contact,
		&i.Email,
		&i.BatchID,
	)
	return i, err
}

const getProfileOfID = `-- name: GetProfileOfID :one
SELECT id, user_id, address, city, state, contact, email, batch_id FROM profiles
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetProfileOfID(ctx context.Context, userID sql.NullInt64) (Profile, error) {
	row := q.db.QueryRowContext(ctx, getProfileOfID, userID)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Address,
		&i.City,
		&i.State,
		&i.Contact,
		&i.Email,
		&i.BatchID,
	)
	return i, err
}

const updateProfile = `-- name: UpdateProfile :one
UPDATE profiles
SET user_id = $2, address = $3, city = $4, state = $5, contact = $6, email = $7, batch_id = $8
WHERE user_id = $1
RETURNING id, user_id, address, city, state, contact, email, batch_id
`

type UpdateProfileParams struct {
	UserID   sql.NullInt64  `json:"user_id"`
	UserID_2 sql.NullInt64  `json:"user_id_2"`
	Address  sql.NullString `json:"address"`
	City     sql.NullString `json:"city"`
	State    sql.NullString `json:"state"`
	Contact  sql.NullString `json:"contact"`
	Email    sql.NullString `json:"email"`
	BatchID  sql.NullInt64  `json:"batch_id"`
}

func (q *Queries) UpdateProfile(ctx context.Context, arg UpdateProfileParams) (Profile, error) {
	row := q.db.QueryRowContext(ctx, updateProfile,
		arg.UserID,
		arg.UserID_2,
		arg.Address,
		arg.City,
		arg.State,
		arg.Contact,
		arg.Email,
		arg.BatchID,
	)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Address,
		&i.City,
		&i.State,
		&i.Contact,
		&i.Email,
		&i.BatchID,
	)
	return i, err
}
